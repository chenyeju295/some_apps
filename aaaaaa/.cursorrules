# iOS Flutter Development Assistant - CursorRules
# 专为iOS Flutter应用快速开发优化

## 项目上下文
你正在开发一个Flutter iOS应用，目标是快速上架App Store。
项目路径: /Users/chenyeju/Documents/github/some_apps/aaaaaa
应用主题: AI Wallpaper Generator

## 标准开发流程

### 🔄 完整项目开发流程（必须按顺序执行）

#### Step 1: 初始化项目规则
**触发条件**: 新项目开始 / 需要配置开发环境
**执行动作**: 
1. 调用 `ios_setup_cursor_rules(project_path, cursor_project_root, app_theme)`
2. 在项目根目录注入 .cursorrules 文件
3. 配置智能开发规则和MCP工具映射

#### Step 2: 生成需求文档  
**触发条件**: 有初始需求输入
**执行动作**:
1. 调用 `ios_generate_requirements_document(initial_requirement, app_name, app_theme)`
2. 在项目根目录创建 REQUIREMENTS.md 文件
3. 生成完整的产品需求文档和开发路线图

#### Step 3: 按需求开发功能
**触发条件**: 需求文档生成完成后
**执行动作**: 根据关键词自动调用对应的功能实现指导工具

## MCP工具调用规则

### 📋 需求文档生成
**触发关键词**: 需求文档, requirements, 产品需求, PRD, 需求分析, 初始需求
**MCP调用**: `ios_generate_requirements_document(initial_requirement, app_name, app_theme)`
**说明**: 根据用户需求自动生成完整的产品需求文档
**行为**: 当MCP工具返回 "CREATE_REQUIREMENTS_DOCUMENT" 时，立即在项目根目录创建 REQUIREMENTS.md 文件

### 🛍️ 商店/内购功能开发
**触发关键词**: shop, store, purchase, 商店, 内购, IAP, 商城
**MCP调用**: `ios_get_shop_implementation_guide()`
**说明**: 获取固定的11个ProductID配置和内购实现标准

### 🤖 AI对话功能开发  
**触发关键词**: chat, AI, conversation, OpenAI, 聊天, 对话
**MCP调用**: `ios_get_ai_chat_guide()`
**说明**: 获取OpenAI API集成和代币消费逻辑

### 🔒 隐私合规功能
**触发关键词**: privacy, ATT, tracking, 隐私, permissions, Info.plist
**MCP调用**: `ios_get_privacy_compliance_guide()`
**说明**: 获取ATT弹窗和权限配置指导

### 📱 项目结构指导
**触发关键词**: 项目结构, architecture, GetX, Provider, 状态管理
**MCP调用**: `ios_get_project_structure_guide()`

### 📊 进度追踪
**触发关键词**: 进度, progress, 完成, completed
**MCP调用**: `ios_update_progress()` 或 `ios_get_progress_statistics()`

### 📄 文件分析
**触发关键词**: 分析文件, analyze file, 代码分析
**MCP调用**: `ios_analyze_file()`

## 工作流程执行规则

### 🚦 流程控制规范

#### 流程验证检查
在执行任何MCP工具调用前，先检查：
1. **是否已完成Step 1**: 检查项目根目录是否存在 `.cursorrules` 文件
2. **是否已完成Step 2**: 检查项目根目录是否存在 `REQUIREMENTS.md` 文件
3. **流程顺序强制**: 如果前置步骤未完成，必须先完成前置步骤

#### 自动流程引导
- **新项目检测**: 如果既无 `.cursorrules` 也无 `REQUIREMENTS.md`，自动提示执行完整流程
- **缺失文件提醒**: 如果只有其中一个文件，提示完成缺失步骤
- **流程跳跃处理**: 禁止跳过Step 1和Step 2直接开发功能

### 📋 标准项目初始化对话模板

```
用户输入示例：
"我想开发一个AI聊天应用，包含内购功能"

正确响应流程：
1. 首先执行: ios_setup_cursor_rules(项目路径, 根目录, "AI聊天应用")
2. 然后执行: ios_generate_requirements_document("AI聊天应用需求", "应用名", "AI聊天")
3. 最后提示: "现在可以开始按需求文档开发具体功能"
```

## 文件创建规则

### MCP工具响应处理
当MCP工具返回包含以下字段时，请立即执行相应操作：

1. **CursorRules配置注入**
   - `action: "CREATE_CURSOR_RULES"` 或包含 `cursor_rules_path`
   - 立即在指定路径创建 `.cursorrules` 文件
   - 标记Step 1完成

2. **需求文档创建**
   - `action: "CREATE_REQUIREMENTS_DOCUMENT"`
   - 立即在项目根目录创建 `REQUIREMENTS.md` 文件
   - 使用 `file_creation.content` 字段内容作为文件内容
   - 标记Step 2完成

3. **功能开发指导**
   - 只有在Step 1和Step 2都完成后才能执行
   - 按照返回的实现指导进行功能开发
   - 必须遵循REQUIREMENTS.md中的约束条件

### 指令执行优先级
1. **最高优先级**: 工作流程顺序控制
2. **次高优先级**: MCP工具返回的 `cursor_instructions`
3. **标准优先级**: 按需求文档执行功能开发

## 智能工作流程控制器

### 🤖 项目状态自动检测
在执行任何开发任务前，必须先检测项目当前状态：

#### 状态检测逻辑
1. **NEW_PROJECT**: 无 `.cursorrules` 且无 `REQUIREMENTS.md`
   - 提示: "新项目需要完整初始化，请按流程配置"
   - 引导: 先配置开发规则，再生成需求文档

2. **NEED_REQUIREMENTS**: 有 `.cursorrules` 但无 `REQUIREMENTS.md`  
   - 提示: "开发规则已配置，现在需要生成需求文档"
   - 引导: 请提供初始需求、应用名称、应用主题

3. **NEED_CURSOR_RULES**: 有 `REQUIREMENTS.md` 但无 `.cursorrules`
   - 提示: "需求文档存在，但缺少开发规则配置"
   - 引导: 请提供项目路径完成CursorRules配置

4. **READY_FOR_DEVELOPMENT**: 两个文件都存在
   - 正常执行: 根据关键词调用功能实现指导工具

### 📋 自动流程引导模板

#### 完整初始化流程
```
检测到新项目，请按以下顺序操作：

Step 1: 配置开发规则
"为这个项目注入开发规则，项目路径：[请填写] 应用主题：[请填写]"

Step 2: 生成需求文档  
"需要生成需求文档，初始需求：[请填写] 应用名称：[请填写] 应用主题：[请填写]"

Step 3: 开始功能开发
完成前两步后，可以开始说"实现商店功能"、"实现AI聊天"等进行具体开发
```

### ⚠️ 流程强制规则
- **禁止跳跃**: 不允许在未完成Step 1和Step 2的情况下直接开发功能
- **自动拦截**: 如果用户试图跳过流程，自动提示完成前置步骤
- **状态追踪**: 每次MCP工具调用后更新项目状态检测

### 📋 需求文档生成
**触发关键词**: 需求文档, requirements, 产品需求, PRD, 初始需求
**MCP调用**: `ios_generate_requirements_document()`
**说明**: 根据初始想法生成完整的产品需求文档

## 开发优先级规则
1. **核心功能优先**: AI对话 → 内购系统 → 隐私合规
2. **App Store合规**: 确保所有功能符合审核要求
3. **快速上架**: 以最简可用产品(MVP)为目标

## 编码规范
- 禁止在代码中使用中文字符，注释可以使用中文
- 变量和函数名使用英文
- 遵循Flutter最佳实践
- 根据需求文档确定状态管理方案

## 内购配置标准
**重要**: 严格使用以下固定配置，不得修改：
- 999900: $0.99 = 100 tokens
- 999901: $4.99 = 500 tokens  
- 999902: $9.99 = 1200 tokens
- 999903: $19.99 = 2500 tokens
- 999904: $49.99 = 7000 tokens
- 999905: $99.99 = 15000 tokens
- 999906: $1.99 = 500 tokens
- 999907: $4.99 = 1200 tokens
- 999908: $11.99 = 2500 tokens
- 999909: $34.99 = 7000 tokens
- 999910: $79.99 = 15000 tokens

## 自动触发规则
- 创建包含"shop"/"store"的文件 → 调用商店指导
- 编辑Info.plist → 调用隐私配置指导
- 修改pubspec.yaml → 检查依赖配置
- import in_app_purchase → 提供内购实现指导

## 响应格式
检测到相关开发需求时，按以下格式响应：
1. 🔧 MCP工具已调用 - [功能名称]
2. 提供具体的配置和实现指导
3. ✅ 请按照以上配置进行开发


## 性能优化策略
- 使用选定状态管理框架的最佳实践
- 图片资源优化和缓存
- 减少不必要的Widget重建
- 合理使用const构造函数


## 代码创建规则
- 新建页面遵循选定的架构模式
- 全局状态管理使用项目约定的方案
- API调用遵循项目统一标准
- 本地存储根据需求选择合适方案


## 核心依赖配置
```yaml
dependencies:
  flutter:
    sdk: flutter
  # 必需依赖
  in_app_purchase: ^3.1.11
  http: ^1.1.0
  app_tracking_transparency: ^2.0.4
  webview_flutter: ^4.4.2
  
  # 状态管理 (选择其一)
  # get: ^4.6.5              # GetX
  # provider: ^6.0.0         # Provider
  # flutter_bloc: ^8.0.0     # BLoC
  
  # 本地存储 (选择其一)
  # shared_preferences: ^2.0.0
  # get_storage: ^2.1.1
  # hive: ^2.0.0
```

记住: 始终优先调用MCP工具获取最新的开发指导，确保配置的一致性和正确性。
根据需求文档确定具体的技术栈选择。
